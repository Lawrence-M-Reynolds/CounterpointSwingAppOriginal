package law.counterpoint.rules;

import law.counterpoint.counterpointComposition.CounterpointComposition;

/**
 * The abstract super class of all rules that evaluate a composition solution, either
 * submitted by the user or generated by the generation algorithm. 
 * All rules should generally have a RuleReport object associated with them to
 * carry information about when the rule has been broken. 
 * @author BAZ
 *
 */
public abstract class Rule {
	/**
	 * This method must be implemeneted in some way to evaluate the composition that's
	 * passed in.
	 * The boolean annotateComposition is true when it is just a solution submitted by the
	 * user to be evaluated and false when it is used by the generator. 
	 * 
	 * When true the method should create the RuleReport object associated with this rule 
	 * whenever it is broken and pass in an appropriate comment. The annotation objects 
	 * must also be set, both within the offending Species elements and in the RuleReport 
	 * object to be sent back.
	 * 
	 * When false the evaluationScoringObject within the counterpoint composition should
	 * have a scoring value added to it. This generation algorithm uses this score
	 * to select which solutions to keep on to the next iteration.
	 * @param aCounterpointComposition
	 * @param annotateComposition
	 */
	public abstract void evaluateCounterpointComposition(
			CounterpointComposition aCounterpointComposition, boolean annotateComposition);

}
